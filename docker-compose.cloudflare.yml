services:
  postgres:
    image: postgres:14-alpine
    container_name: shop_acc_game_db_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-shop_acc_game}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "127.0.0.1:5432:5432"  # Only accessible from localhost
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    restart: unless-stopped
    networks:
      - app-network
    env_file:
      - .env.production

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: shop_acc_game_pgadmin_prod
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@shopaccgame.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    ports:
      - "127.0.0.1:5050:80"  # Only accessible from localhost
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - app-network
    env_file:
      - .env.production

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.cloudflare
    container_name: shop_acc_game_backend_prod
    environment:
      - DATABASE_URL=jdbc:postgresql://postgres:5432/${POSTGRES_DB:-shop_acc_game}
      - DATABASE_USERNAME=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - RAWG_API_KEY=${RAWG_API_KEY}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - DB_READINESS_ENABLED=true
      - SPRING_PROFILES_ACTIVE=production
      - SERVER_PORT=8080
    ports:
      - "127.0.0.1:8080:8080"  # Expose to localhost for Cloudflare Tunnel or direct access
    volumes:
      # Bind mount local uploads directory so images are accessible
      - ./backend/uploads:/app/uploads
      - ./logs/backend:/app/logs
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - app-network
    env_file:
      - .env.production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.cloudflare
    container_name: shop_acc_game_frontend_prod
    environment:
      - VITE_BACKEND_URL=https://api.gurroshop.com
      - NODE_ENV=production
    ports:
      - "127.0.0.1:3000:80"  # Expose to localhost for Cloudflare Tunnel or direct access
    restart: unless-stopped
    networks:
      - app-network
    env_file:
      - .env.production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Monitoring (accessible only from localhost)
  prometheus:
    image: prom/prometheus:latest
    container_name: shop_acc_game_prometheus
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    container_name: shop_acc_game_grafana
    ports:
      - "127.0.0.1:3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped
    networks:
      - app-network

volumes:
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  app-network:
    driver: bridge 